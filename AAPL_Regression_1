import yfinance as yf
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Fetch stock data from Yahoo Finance
def fetch_stock_data(ticker, start_date, end_date):
    stock_data = yf.download(ticker, start=start_date, end=end_date)
    return stock_data

# Prepare the data for the model
def prepare_data(stock_data):
    stock_data['Prediction'] = stock_data['Close'].shift(-1)  # Predict the next day's price
    X = stock_data[['Close']][:-1]  # Features: current day's close price
    y = stock_data['Prediction'][:-1]  # Target: next day's close price
    return X, y

# Train linear regression model
def train_model(X, y):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = LinearRegression()
    model.fit(X_train, y_train)
    
    # Test the model
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    print(f"Mean Squared Error: {mse}")
    
    return model, X_test, y_test, y_pred

# Plot the results
def plot_results(X_test, y_test, y_pred):
    plt.figure(figsize=(12, 6))
    plt.plot(X_test.index, y_test, color='blue', label='Actual Price', linestyle='-', marker='o')
    plt.plot(X_test.index, y_pred, color='red', label='Predicted Price', linestyle='--', marker='x')
    plt.title('AAPL Prediction vs Actual Price', fontsize=16)
    plt.xlabel('Date', fontsize=12)
    plt.ylabel('Price (USD)', fontsize=12)
    plt.legend(loc='upper left')
    plt.grid(True)
    plt.tight_layout()
    plt.show()

# Main function
def main():
    ticker = 'AAPL'  
    start_date = '2020-01-01'
    end_date = '2023-01-01'
    
    # Step 1: Fetch the stock data
    print(f"Fetching stock data for {ticker}...")
    stock_data = fetch_stock_data(ticker, start_date, end_date)
    
    # Step 2: Prepare the data
    X, y = prepare_data(stock_data)
    
    # Step 3: Train the model
    print("Training the model...")
    model, X_test, y_test, y_pred = train_model(X, y)
    
    # Step 4: Plot the results
    print("Plotting the results...")
    plot_results(X_test, y_test, y_pred)
    
    # Step 5: Notify the user that the process is complete
    print("Model training and prediction complete!")

if __name__ == "__main__":
    main()
